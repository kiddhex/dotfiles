# Create new file(s) change permissions and open in Sublime Text
function create() {
    if [ $# -eq 0 ]; then
       echo "usage: create filename [filename [filename [...]]]"
    else
        touch $@; chmod 775 $@; subl $@
    fi
}

# Create new directory and cd into it
function mkd() {
    if [ $# -eq 0 ]; then
        echo "usage: mkd directory [directory [directory [...]]]"
    else
        mkdir -p "$@" && cd "$_";
    fi
}

# Filter processes with keyword
function showps() {
    ps -A | grep -v 'grep' | grep -i "$@"
}

# Get colors in manual pages
function man() {
    env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}

# Start a PHP server from a directory, optionally specifying the port (Requires PHP >= 5.4)
function phpserver() {
    local port="${1:-4000}";
    sleep 1 && open "http://localhost:${port}/" & php -S "localhost:${port}";
}

# Create a new laravel project
function laravel-new () {
    if [ $# -eq 0 ]; then
        echo "usage: laravel-new project"
    else
        sudo composer create-project laravel/laravel "$@" --prefer-dist
    fi
}

# Show laravel routes
function routes() {
    if [ $# -eq 0 ]; then
        php artisan route:list
    else
        php artisan route:list | grep ${1}
    fi
}

# Shorthand for tree with hidden files and ignoring common vendors
# The output gets piped into less
function tre() {
    tree -aC -I '.git|vendor|node_modules|bower_components' --dirsfirst "$@" | less -FRX;
}

# Create a simple scafold to build a test application.
function scafold() {
    if [ -d $1 ] ; then
        echo "scafold: '$1': Directory exists"
    else
        mkdir -p $1 & cd $1;
        mkdir js css;
        touch index.html js/main.js css/style.css;
        sudo chmod -R 775 ./
    fi
}

# Extract archives based on the extension
function extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2) tar xvjf $1   ;;
            *.tar.gz)  tar xvzf $1   ;;
            *.bz2)     bunzip2 $1    ;;
            *.rar)     unrar x $1    ;;
            *.gz)      gunzip $1     ;;
            *.tar)     tar xvf $1    ;;
            *.tbz2)    tar xvjf $1   ;;
            *.tgz)     tar xvzf $1   ;;
            *.zip)     unzip $1      ;;
            *.Z)       uncompress $1 ;;
            *.7z)      7z x $1       ;;
            *)         echo "don't know how to extract '$1'..." ;;
        esac
    else
       echo "'$1' is not a valid file!"
    fi
}
